<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="21" minHeight="10" 
             alpha.disabled="0.5">
     
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
	<fx:Script fb:purpose="styling">
		<![CDATA[         
			
			/* Define the skin elements that should not be colorized. 
			For button, the graphics are colorized but the label is not. */
			static private const exclusions:Array = ["labelDisplay","iconDisplay"];

			static private var ct:ColorTransform = new ColorTransform;
			
			/** 
			 * @private
			 */     
			override public function get colorizeExclusions():Array {return exclusions;}
			
			/**
			 * @private
			 */
			override protected function initializationComplete():void
			{
				super.initializationComplete();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				var n:Number;
				n = getStyle("alpha");
				if (n) {
					if (bg1) bg1.alpha = n;
					if (bg2) bg2.alpha = n;
				}
				n = getStyle("borderAlpha");
				if (n) {
					border.alpha = n;
				}
				n = getStyle("cornerRadius");
				if (!isNaN(n)) {
					if (bg1) { bg1.radiusX = bg1.radiusY = n; }
					if (bg2) { bg2.radiusX = bg2.radiusY = n; }
					border.radiusX = border.radiusY = n;
				}
				if (getStyle("iconTint")) {
					var color:uint = getStyle("iconTint");
					ct.color = color;
					ct.alphaMultiplier = 1;					
					if (iconDisplay) iconDisplay.transform.colorTransform = ct;
				}
				if (getStyle("chromeColor")) {
					var c:uint = getStyle("chromeColor");
					if (bgColor) {
						bgColor.color = c;
					}
					if (bgColor2) bgColor2.color = c;
					borderColor.color = c;
				}
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
			}
			
			
		]]>        
	</fx:Script>
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
	<s:Rect left="0" right="0" bottom="0" top="0" radiusX="2" radiusY="2">
		<s:fill>
			<s:SolidColor color="0xffffff"/>
		</s:fill>
	</s:Rect>
    <s:Rect left="0" right="0" bottom="0" top="0" radiusX="2" radiusY="2" includeIn="down,over" id="bg1">
		<s:fill>
			<s:SolidColor color="0xf7f7f7" id="bgColor" alpha=".8"/>
		</s:fill>
		<s:filters.down>
			<s:GlowFilter color="{bgColor.color}" strength="2"/>
		</s:filters.down>
	</s:Rect>
	<s:Rect left="0" right="0" bottom="0" top="0" radiusX="2" radiusY="2" includeIn="up" id="bg2">
		<s:fill>
			<s:SolidColor color="0xe4e7ea" id="bgColor2"/>
		</s:fill>
	</s:Rect>
	<s:Rect left="0" right="0" bottom="0" top="0" radiusX="2" radiusY="2" id="border">
		<s:stroke>
			<s:SolidColorStroke color="0xcccccc" id="borderColor" alpha="1" />
		</s:stroke>
	</s:Rect>
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
    <s:Label id="labelDisplay"
             textAlign="center"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
             left="10" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkButtonSkin>
